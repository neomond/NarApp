//
//  DashboardViewController.swift
//  NarTask
//
//  Created by Nazrin Atayeva on 23.01.24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol DashboardDisplayLogic: AnyObject {
    func displayStories(viewModel: Dashboard.FetchStories.ViewModel)
    
    func displayHubs(viewModel: Dashboard.FetchHubs.HubsModel)
    
    func displayLoad(viewModel: Dashboard.Load.ViewModel)
    
    func displayError(errorMessage: String)
}

class DashboardViewController: UIViewController {
    
    var interactor: DashboardBusinessLogic?
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    var mainView: DashboardView!
    
    var stories: [StoryModel] = []
    var hubs: [HubModel] = []
    
    override func loadView() {
        super.loadView()
        self.view = mainView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        mainView.storiesCollectionView.delegate = self
        mainView.storiesCollectionView.dataSource = self
        mainView.servicesGridView.delegate = self
    
        self.load()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.setNavigationBarHidden(false, animated: animated)
    }
    
    func load() {
        let request = Dashboard.Load.Request()
        interactor?.load(request: request)
    }
    
    func loadHubServices() {
       let request = Dashboard.FetchHubs.Request()
       interactor?.fetchHubs(request: request)
   }
    
    func loadStories() {
        let request = Dashboard.FetchStories.Request()
        interactor?.fetchStories(request: request)
    }
  
}


extension DashboardViewController: DashboardDisplayLogic {
    
    func displayLoad(viewModel: Dashboard.Load.ViewModel) {
        
           self.loadStories()
        
//           self.loadHubServices()
    }
    
    
    func displayStories(viewModel: Dashboard.FetchStories.ViewModel) {
        
        self.stories = viewModel.stories
        print(stories.count)
        self.mainView.storiesCollectionView.reloadData()
//      self.mainView.stopStoriesLoading()
    }
    
    func displayHubs(viewModel: Dashboard.FetchHubs.HubsModel) {
        self.hubs = viewModel.hubs
//      self.mainView.servicesGridView.setupGridItems(with: self.hubs)
    
    }

    func displayError(errorMessage: String) { }
}

extension DashboardViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == self.mainView.storiesCollectionView {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: StoryCircleCell.reuseIdentifier, for: indexPath) as? StoryCircleCell else {
                return UICollectionViewCell()
            }
            print(stories.count)
            cell.configure(storyModel: stories[indexPath.row])
            return cell
            
        }
        else {
            //        else if collectionView == self.mainView.servicesGridView {
            ////            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ServicesViewCell.reuseIdentifier, for: IndexPath) as? ServicesGridView else {
            ////                return UICollectionViewCell()
            ////            }
            ////            cell.configure(with: self.hubs[indexPath.row])
            //        }
            
            return  UICollectionViewCell()
        }}
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == self.mainView.storiesCollectionView {
            return self.stories.count
        }
        //        else if collectionView == self.mainView.servicesGridView {
        //            return self.hubs.count
        //        }
        else {
            return 0
        }
    }
    
    // ::here ->  add story as the current window
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        if collectionView == mainView.storiesCollectionView {
            let storyView = StoryView(frame: UIScreen.main.bounds, stories: stories)
            storyView.configure(with: stories[indexPath.row].url, completion: {
                // ::here -> mark the story as watched when StoryView is closed
                self.stories[indexPath.row].isSeen = true
                collectionView.reloadItems(at: [indexPath])
                // ::here -> reload the cell to update its appearance
            })
            storyView.startStory()
            
            if let currentWindow = view.window {
                currentWindow.addSubview(storyView)
            }
        }
    }
}
//            func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//                guard collectionView == mainView.storiesCollectionView,
//                      let cell = collectionView.dequeueReusableCell(withReuseIdentifier: StoryCircleCell.reuseIdentifier, for: indexPath) as? StoryCircleCell else {
//                    return UICollectionViewCell()
//                }
//    
//                let story =  stories[indexPath.row]
//                cell.imageView.image = story.url
//                cell.setWatched(story.isSeen)
//                return cell
//            }
        


    extension DashboardViewController: ServicesGridViewDelegate {
        func didSelectService(_ service: ServiceType) {
            switch service {
            case .freeSMS:
                router?.routeToFreeSMS()
            case .balanceTransfer:
                router?.routeToBalanceTransfer()
            case .servicesAbroad:
                router?.routeToVAS()
            default:
                break
            }
        }
    }
    

